#!/bin/sh
DOTFILES="$(pwd)"
LOG_FILE="$DOTFILES/install.log"
COLOR_GRAY="\033[1;38;5;243m"
COLOR_BLUE="\033[1;34m"
COLOR_GREEN="\033[1;32m"
COLOR_RED="\033[1;31m"
COLOR_PURPLE="\033[1;35m"
COLOR_YELLOW="\033[1;33m"
COLOR_NONE="\033[0m"
newline=$'\n'

title() {
    echo "${COLOR_PURPLE}$1${COLOR_NONE}"
}

error() {
    echo "${COLOR_RED}ERROR: ${COLOR_NONE}$1"
}

success() {
    echo "${COLOR_GREEN}SUCCESS: ${COLOR_NONE} $1"
}

warning() {
    echo "${COLOR_YELLOW}WARNING: ${COLOR_NONE}$1"
}

info() {
    echo "${COLOR_BLUE}INFO: ${COLOR_NONE}$1"
}

error_message() {
    echo "${COLOR_RED}$1${COLOR_NONE}"
}

success_message() {
    echo "${COLOR_GREEN}$1${COLOR_NONE}"
}

install() {
    if [ "$(uname)" = "Darwin" ]; then
        info "MacOS detected"
        brew install $1 >> $LOG_FILE
    elif [ "$(uname)" = "Linux" ]; then
        info "Linux detected"
        if [ -n "$2" ]; then
            sudo apt install "$2" >> $LOG_FILE
        else
            sudo apt install "$1" >> $LOG_FILE
        fi
    fi
}

linux() {
    if [ "$(uname)" = "Linux" ]; then
        sudo apt install $1 >> $LOG_FILE
    fi
}

mac() {
    if [ "$(uname)" = "Darwin" ]; then
        brew install $1 >> $LOG_FILE
    fi
}

check_dependencies() {
    local utils=(git curl pip python3 zsh rg fzf pnpm)
    local dir_utils=(nvm zplug)
    title "Checking for installed apps"
    for util in "${utils[@]}"; do
        printf %s "Checking $util... "

        if test "$(command -v "$util")"; then
            success_message "Installed."
        else
            error_message "Not installed."
        fi
    done

    for util in "${dir_utils[@]}"; do
        printf %s "Checking $util... "

        if [ -d "$HOME/.$util" ]; then
            success_message "Installed."
        else
            error_message "Not installed."
        fi
    done
}

install_dependencies() {
    title "Installing dependencies"

    if test "$(command -v "git")"; then
        success "Git is already installed."
    else
        warning "Git is not installed."
        info "Installing Git..."
        install git
        success "Git installed."
    fi

    if test "$(command -v "curl")"; then
        success "curl is already installed."
    else
        warning "curl is not installed."
        info "Installing curl..."
        install curl
        success "curl installed."
    fi

    if [ -d "$HOME/.nvm" ]; then
        success "nvm is already installed."
    else
        warning "nvm is not installed."
        info "Installing nvm..."
        curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh >> $LOG_FILE | bash >> $LOG_FILE
        info "nvm installed, setting it up..."
        nvm ls-remote >> $LOG_FILE
        nvm install --lts >> $LOG_FILE
        nvm use --lts >> $LOG_FILE
        success "nvm is installed and configured to use the latest LTS version."
    fi

    if test "$(command -v "pnpm")"; then
        success "pnpm is already installed."
    else
        warning "pnpm is not installed."
        info "Installing pnpm..."
        npm install -g pnpm >> $LOG_FILE
        success "pnpm installed."
    fi

    if test "$(command -v "python3")"; then
        success "python is already installed."
    else
        warning "python is not installed."
        info "Installing python..."
        install python python3
        success "python3 installed."
    fi

    if test "$(command -v "pip")"; then
        success "pip is already installed."
    else
        warning "pip is not installed."
        info "Installing pip..."
        linux python3-pip
        success "pip installed."
    fi

    if test "$(command -v "zsh")"; then
        success "zsh is already installed."
    else
        warning "zsh is not installed."
        info "Installing zsh..."
        install zsh
        success "zsh installed."
    fi

    if test "$(command -v "rg")"; then
        success "ripgrep is already installed."
    else
        warning "ripgrep is not installed."
        info "Installing ripgrep..."
        install ripgrep
        success "ripgrep installed."
    fi

    if test "$(command -v "fzf")"; then
        success "fzf is already installed."
    else
        warning "fzf is not installed."
        info "Installing fzf..."
        install fzf
        success "fzf installed."
    fi

    if [ -d "$HOME/.zplug" ]; then
        success "zplug is already installed."
    else
        warning "zplug is not installed."
        info "Installing zplug..."
        curl -sL --proto-redir -all,https https://raw.githubusercontent.com/zplug/installer/master/installer.zsh  >> $LOG_FILE | zsh >> $LOG_FILE
        success "zplug installed."
    fi

    info "All logs are saved to $LOG_FILE"
}

backup_shell() {
    title "Backing up Shell.."
    BACKUP_DIR=$HOME/.dotfiles/backup

    info "Creating backup directory at $BACKUP_DIR"
    mkdir -p "$BACKUP_DIR"
    info "Attempting to backup existing zsh config files"
    mv ~/.zshrc "$BACKUP_DIR/.zshrc.backup"
    mv ~/.zshenv "$BACKUP_DIR/.zshenv.backup"
    mv ~/.zprofile "$BACKUP_DIR/.zprofile.backup"
    mv ~/.zlogin "$BACKUP_DIR/.zlogin.backup"
    success "Backup complete!"
}

setup_shell() {
    title "Setting up Shell.."
    touch ~/.zshenv
    echo "export ZDOTDIR=~/.dotfiles" >> ~/.zshenv
    ln -s $DOTFILES/shell ~/.dotfiles
    info "Created symlink to $(pwd) at ~/.dotfiles"
    success "Setup complete!"
}

remove_shell() {
    title "Removing Shell.."
    rm -rf ~/.zshenv
    rm -rf ~/.zshrc
    success "Removed shell configuration!"
}

"$@"